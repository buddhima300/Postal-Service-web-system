"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var convertKetToBase64_1 = __importDefault(require("./functions/convertKetToBase64"));
var createPrivateAndPublicKeys_1 = __importDefault(require("./functions/createPrivateAndPublicKeys"));
var decrypt_1 = __importDefault(require("./functions/decrypt"));
var decryptStringWithRsaPrivateKey_1 = __importDefault(require("./functions/decryptStringWithRsaPrivateKey"));
var encrypt_1 = __importDefault(require("./functions/encrypt"));
var encryptStringWithRsaPublicKey_1 = __importDefault(require("./functions/encryptStringWithRsaPublicKey"));
var NodeRSA = /** @class */ (function () {
    function NodeRSA(publicKey, privateKey, modulusLength) {
        this.publicKey = publicKey;
        this.privateKey = privateKey;
        this.modulusLength = modulusLength || 2048;
        this.keyBase64 = 'base64';
    }
    NodeRSA.prototype.encryptStringWithRsaPublicKey = function (args) {
        var _a = args.publicKey, publicKey = _a === void 0 ? this.publicKey : _a;
        return (0, encryptStringWithRsaPublicKey_1.default)(__assign(__assign({}, args), { publicKey: (0, convertKetToBase64_1.default)(publicKey) }));
    };
    NodeRSA.prototype.decryptStringWithRsaPrivateKey = function (args) {
        var _a = args.privateKey, privateKey = _a === void 0 ? this.privateKey : _a;
        return (0, decryptStringWithRsaPrivateKey_1.default)(__assign(__assign({}, args), { privateKey: (0, convertKetToBase64_1.default)(privateKey) }));
    };
    NodeRSA.prototype.encrypt = function (args) {
        var _a = args.privateKey, privateKey = _a === void 0 ? this.privateKey : _a;
        return (0, encrypt_1.default)(__assign(__assign({}, args), { privateKey: (0, convertKetToBase64_1.default)(privateKey) }));
    };
    NodeRSA.prototype.decrypt = function (args) {
        var _a = args.publicKey, publicKey = _a === void 0 ? this.publicKey : _a;
        return (0, decrypt_1.default)(__assign(__assign({}, args), { publicKey: (0, convertKetToBase64_1.default)(publicKey) }));
    };
    NodeRSA.prototype.createPrivateAndPublicKeys = function (modulusLength) {
        if (modulusLength === void 0) { modulusLength = this.modulusLength; }
        return (0, createPrivateAndPublicKeys_1.default)(modulusLength);
    };
    // Encrypt buffer using RSA public key (new)
    NodeRSA.prototype.encryptBufferWithRsaPublicKey = function (buffer, publicKey) {
        var base64String = buffer.toString(this.keyBase64);
        return this.encryptStringWithRsaPublicKey({ text: base64String, publicKey: publicKey });
    };
    // Decrypt buffer using RSA private key (new)
    NodeRSA.prototype.decryptBufferWithRsaPrivateKey = function (encryptedText, privateKey) {
        var decryptedBase64 = this.decryptStringWithRsaPrivateKey({ text: encryptedText, privateKey: privateKey });
        return Buffer.from(decryptedBase64, this.keyBase64);
    };
    return NodeRSA;
}());
exports.default = NodeRSA;
